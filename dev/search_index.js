var documenterSearchIndex = {"docs":
[{"location":"#SBML.jl-—-load-systems-biology-models-from-SBML-files","page":"Documentation","title":"SBML.jl — load systems biology models from SBML files","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"This package provides a straightforward way to load model- and simulation-relevant information from SBML files.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"The library provides a single function readSBML to load a SBML.Model:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> using SBML\njulia> mdl = readSBML(\"Ec_core_flux1.xml\")\nSBML.Model(…)\n\njulia> mdl.compartments\n2-element Array{String,1}:\n \"Extra_organism\"\n \"Cytosol\"","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"There are several functions to help you with using the data in the usual COBRA-style workflows, such as stoichiometry_matrix:","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"julia> metabolites, reactions, S = stoichiometry_matrix(mdl)\njulia> metabolites\n77-element Array{String,1}:\n \"M_succoa_c\"\n \"M_ac_c\"\n \"M_etoh_c\"\n  ⋮\n\njulia> S\n77×77 SparseArrays.SparseMatrixCSC{Float64,Int64} with 308 stored entries:\n  [60,  1]  =  -1.0\n  [68,  1]  =  1.0\n  [1 ,  2]  =  1.0\n  [6 ,  2]  =  -1.0\n  ⋮\n  [23, 76]  =  1.0\n  [56, 76]  =  -1.0\n  [30, 77]  =  -1.0\n  [48, 77]  =  1.0\n\njulia> Matrix(S)\n77×77 Array{Float64,2}:\n 0.0   1.0  0.0  0.0  0.0  0.0  0.0  …  0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  1.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  -1.0  0.0  0.0  0.0  0.0  0.0  …  0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  1.0  -1.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0  -1.0  0.0   0.0  0.0  0.0  0.0\n ⋮                         ⋮         ⋱  ⋮                          ⋮    ","category":"page"},{"location":"#Function-reference","page":"Documentation","title":"Function reference","text":"","category":"section"},{"location":"#Helper-types","page":"Documentation","title":"Helper types","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"types.jl\"]","category":"page"},{"location":"#SBML.Maybe","page":"Documentation","title":"SBML.Maybe","text":"Maybe{X}\n\nType shortcut for \"X or nothing\" or \"nullable X\" in javaspeak. Name got inspired by our functional friends.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.VPtr","page":"Documentation","title":"SBML.VPtr","text":"VPtr\n\nA convenience wrapper for \"any\" (C void) pointer.\n\n\n\n\n\n","category":"type"},{"location":"#Data-structures","page":"Documentation","title":"Data structures","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"structs.jl\"]","category":"page"},{"location":"#SBML.Compartment","page":"Documentation","title":"SBML.Compartment","text":"struct Compartment\n\nSBML Compartment with sizing information.\n\nFields\n\nname::Union{Nothing, String}\nconstant::Union{Nothing, Bool}\nspatial_dimensions::Union{Nothing, Int64}\nsize::Union{Nothing, Float64}\nunits::Union{Nothing, String}\nnotes::Union{Nothing, String}\nannotation::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"#SBML.FunctionDefinition","page":"Documentation","title":"SBML.FunctionDefinition","text":"Custom function definition.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.GPAAnd","page":"Documentation","title":"SBML.GPAAnd","text":"Boolean binary \"and\" in the association expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.GPAOr","page":"Documentation","title":"SBML.GPAOr","text":"Boolean binary \"or\" in the association expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.GPARef","page":"Documentation","title":"SBML.GPARef","text":"Gene product reference in the association expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.GeneProduct","page":"Documentation","title":"SBML.GeneProduct","text":"struct GeneProduct\n\nGene product metadata.\n\nFields\n\nname::Union{Nothing, String}\nlabel::Union{Nothing, String}\nnotes::Union{Nothing, String}\nannotation::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"#SBML.GeneProductAssociation","page":"Documentation","title":"SBML.GeneProductAssociation","text":"Abstract type for all kinds of gene product associations\n\n\n\n\n\n","category":"type"},{"location":"#SBML.Math","page":"Documentation","title":"SBML.Math","text":"A simplified representation of MathML-specified math AST\n\n\n\n\n\n","category":"type"},{"location":"#SBML.MathApply","page":"Documentation","title":"SBML.MathApply","text":"Function application (\"call by name\", no tricks allowed) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.MathConst","page":"Documentation","title":"SBML.MathConst","text":"A constant identified by name (usually something like pi, e or true) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.MathIdent","page":"Documentation","title":"SBML.MathIdent","text":"An identifier (usually a variable name) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.MathLambda","page":"Documentation","title":"SBML.MathLambda","text":"Function definition (aka \"lambda\") in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.MathTime","page":"Documentation","title":"SBML.MathTime","text":"A special value representing the current time of the simulation, with a special name.\n\n\n\n\n\n","category":"type"},{"location":"#SBML.MathVal","page":"Documentation","title":"SBML.MathVal","text":"A literal value (usually a numeric constant) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"#SBML.Model","page":"Documentation","title":"SBML.Model","text":"struct Model\n\nStructure that collects the model-related data. Contains parameters, units, compartments, species and reactions and gene_products, and additional notes and annotation (also present internally in some of the data fields). The contained dictionaries are indexed by identifiers of the corresponding objects.\n\nFields\n\nparameters::Dict{String,Float64}\nunits::Dict{String,Number}\ncompartments::Dict{String,SBML.Compartment}\nspecies::Dict{String,SBML.Species}\nreactions::Dict{String,SBML.Reaction}\ngene_products::Dict{String,SBML.GeneProduct}\nfunction_definitions::Dict{String,SBML.FunctionDefinition}\nnotes::Union{Nothing, String}\nannotation::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"#SBML.Reaction","page":"Documentation","title":"SBML.Reaction","text":"struct Reaction\n\nReaction with stoichiometry that assigns reactants and products their relative consumption/production rates, lower/upper bounds (in tuples lb and ub, with unit names), and objective coefficient (oc). Also may contains notes and annotation.\n\nFields\n\nreactants::Dict{String,Float64}\nproducts::Dict{String,Float64}\nlb::Tuple{Float64,String}\nub::Tuple{Float64,String}\noc::Float64\ngene_product_association::Union{Nothing, SBML.GeneProductAssociation}\nkinetic_math::Union{Nothing, SBML.Math}\nreversible::Bool\nnotes::Union{Nothing, String}\nannotation::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"#SBML.Species","page":"Documentation","title":"SBML.Species","text":"struct Species\n\nSpecies metadata – contains a human-readable name, a compartment identifier, formula, charge, and additional notes and annotation.\n\nFields\n\nname::Union{Nothing, String}\ncompartment::String\nboundary_condition::Union{Nothing, Bool}\nformula::Union{Nothing, String}\ncharge::Union{Nothing, Int64}\ninitial_amount::Union{Nothing, Tuple{Float64,Union{Nothing, String}}}\ninitial_concentration::Union{Nothing, Tuple{Float64,Union{Nothing, String}}}\nonly_substance_units::Union{Nothing, Bool}\nnotes::Union{Nothing, String}\nannotation::Union{Nothing, String}\n\n\n\n\n\n","category":"type"},{"location":"#Base-functions","page":"Documentation","title":"Base functions","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"version.jl\", \"readsbml.jl\"]","category":"page"},{"location":"#SBML.Version-Tuple{}","page":"Documentation","title":"SBML.Version","text":"function SBML.Version()\n\nGet the version of the used SBML library in Julia version format.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.extractModel-Tuple{Ptr{Nothing}}","page":"Documentation","title":"SBML.extractModel","text":"\"     function extractModel(mdl::VPtr)::SBML.Model\n\nTake the SBMLModel_t pointer and extract all information required to make a valid SBML.Model structure.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.getAssociation-Tuple{Ptr{Nothing}}","page":"Documentation","title":"SBML.getAssociation","text":"function getAssociation(x::VPtr)::GeneProductAssociation\n\nConvert a pointer to SBML FbcAssociation_t to the GeneProductAssociation tree structure.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.get_optional_bool-Tuple{Ptr{Nothing},Any,Any}","page":"Documentation","title":"SBML.get_optional_bool","text":"get_optional_bool(x::VPtr, is_sym, get_sym)::Maybe{Bool}\n\nHelper for getting out boolean flags.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.get_optional_double-Tuple{Ptr{Nothing},Any,Any}","page":"Documentation","title":"SBML.get_optional_double","text":"get_optional_double(x::VPtr, is_sym, get_sym)::Maybe{Float64}\n\nHelper for getting out C doubles aka Float64s.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.get_optional_int-Tuple{Ptr{Nothing},Any,Any}","page":"Documentation","title":"SBML.get_optional_int","text":"get_optional_int(x::VPtr, is_sym, get_sym)::Maybe{UInt}\n\nHelper for getting out unsigned integers.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.get_optional_string-Tuple{Ptr{Nothing},Any}","page":"Documentation","title":"SBML.get_optional_string","text":"get_optional_string(x::VPtr, fn_sym)::Maybe{String}\n\nLike get_string, but returns nothing instead of throwing an exception.\n\nThis is used to get notes and annotations and several other things (see get_notes, get_annotations)\n\n\n\n\n\n","category":"method"},{"location":"#SBML.get_string-Tuple{Ptr{Nothing},Any}","page":"Documentation","title":"SBML.get_string","text":"get_string(x::VPtr, fn_sym)::Maybe{String}\n\nC-call the SBML function fn_sym with a single parameter x, interpret the result as a string and return it, or throw exception in case the pointer is NULL.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.readSBML","page":"Documentation","title":"SBML.readSBML","text":"readSBML(\n    fn::String,\n    sbml_conversion = document -> nothing;\n    report_severities = [\"Fatal\", \"Error\"],\n)::SBML.Model\n\nRead the SBML from a XML file in fn and return the contained SBML.Model.\n\nThe sbml_conversion is a function that does an in-place modification of the single parameter, which is the C pointer to the loaded SBML document (C type SBMLDocument*). Several functions for doing that are prepared, including set_level_and_version, libsbml_convert, and convert_simplify_math.\n\nreport_severities switches on and off reporting of certain errors; see the documentation of get_error_messages for details.\n\nTo read from a string instead of a file, use readSBMLFromString.\n\nExample\n\nm = readSBML(\"my_model.xml\", doc -> begin\n    set_level_and_version(3, 1)(doc)\n    convert_simplify_math(doc)\nend)\n\n\n\n\n\n","category":"function"},{"location":"#SBML.readSBMLFromString","page":"Documentation","title":"SBML.readSBMLFromString","text":"readSBML(\n    str::String,\n    sbml_conversion = document -> nothing;\n    report_severities = [\"Fatal\", \"Error\"],\n)::SBML.Model\n\nRead the SBML from the string str and return the contained SBML.Model.\n\nFor the other arguments see the docstring of readSBML, which can be used to read from a file instead of a string.\n\n\n\n\n\n","category":"function"},{"location":"#libsbml-representation-converters","page":"Documentation","title":"libsbml representation converters","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"The converters are intended to be used as parameters of readSBML.","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"converters.jl\"]","category":"page"},{"location":"#SBML.convert_simplify_math","page":"Documentation","title":"SBML.convert_simplify_math","text":"convert_simplify_math\n\nShortcut for libsbml_convert that expands functions, local parameters, and initial assignments in the SBML document.\n\n\n\n\n\n","category":"function"},{"location":"#SBML.libsbml_convert","page":"Documentation","title":"SBML.libsbml_convert","text":"libsbml_convert(conversion_options::Vector{Pair{String, Dict{String, String}}}, report_severities = [\"Fatal\", \"Error\"])\n\nA converter that runs the SBML conversion routine, with specified conversion options. The argument is a vector of pairs to allow specifying the order of conversions.  report_severities switches on and off reporting of certain errors; see the documentation of get_error_messages for details.\n\n\n\n\n\n","category":"function"},{"location":"#SBML.libsbml_convert-2","page":"Documentation","title":"SBML.libsbml_convert","text":"libsbml_convert(converter::String, report_severities = [\"Fatal\", \"Error\"]; kwargs...)\n\nQuickly construct a single run of a libsbml converter from keyword arguments. report_severities switches on and off reporting of certain errors; see the documentation of get_error_messages for details.\n\nExample\n\nreadSBML(\"example.xml\", libsbml_convert(\"stripPackage\", package=\"layout\"))\n\n\n\n\n\n","category":"function"},{"location":"#SBML.set_level_and_version","page":"Documentation","title":"SBML.set_level_and_version","text":"set_level_and_version(level, version, report_severities = [\"Fatal\", \"Error\"])\n\nA converter to pass into readSBML that enforces certain SBML level and version.  report_severities switches on and off reporting of certain errors; see the documentation of get_error_messages for details.\n\n\n\n\n\n","category":"function"},{"location":"#Data-helpers","page":"Documentation","title":"Data helpers","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"utils.jl\"]","category":"page"},{"location":"#SBML.check_errors","page":"Documentation","title":"SBML.check_errors","text":"check_errors(\n    success::Integer,\n    doc::VPtr,\n    error::Exception,\n    report_severities = [\"Fatal\", \"Error\"],\n)\n\nIf success is a 0-valued Integer (a logical false), then call get_error_messages to show the error messages reported by SBML in the doc document and throw the error if they are more than 1.  success is typically the value returned by an SBML C function operating on doc which returns a boolean flag to signal a successful operation.\n\n\n\n\n\n","category":"function"},{"location":"#SBML.extensive_kinetic_math-Tuple{SBML.Model,SBML.Math}","page":"Documentation","title":"SBML.extensive_kinetic_math","text":"function extensive_kinetic_math(\n    m::SBML.Model,\n    formula::SBML.Math;\n    handle_empty_compartment_size = (id::String) -> throw(\n        DomainError(\n            \"Non-substance-only-unit reference to species `$id' in an unsized compartment `$(m.species[id].compartment)'\",\n        ),\n    ),\n)\n\nConvert a SBML math formula to \"extensive\" kinetic laws, where the references to species that are marked as not having only substance units are converted from amounts to concentrations.\n\nIf the data is missing, you can supply a function that adds them. A common way to handle errors is to assume that unsized compartments have volume 1.0 (of whatever units), you can specify that behavior by supplying handle_empty_compartment_size = _ -> 1.0.\n\nHandling of units in the conversion process is ignored in this version.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.flux_bounds-Tuple{SBML.Model}","page":"Documentation","title":"SBML.flux_bounds","text":"flux_bounds(m::SBML.Model)::NTuple{2, Vector{Tuple{Float64,String}}}\n\nExtract the vectors of lower and upper bounds of reaction rates from the model. All bounds are accompanied with the unit of the corresponding value (this behavior is based on SBML specification).\n\n\n\n\n\n","category":"method"},{"location":"#SBML.flux_objective-Tuple{SBML.Model}","page":"Documentation","title":"SBML.flux_objective","text":"flux_objective(m::SBML.Model)::Vector{Float64}\n\nExtract the vector of objective coefficients of each reaction.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.get_compartment_size-Tuple{SBML.Model,Any}","page":"Documentation","title":"SBML.get_compartment_size","text":"get_compartment_size(m::SBML.Model, compartment; default = nothing)\n\nA helper for easily getting out a defaulted compartment size.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.get_error_messages-Tuple{Ptr{Nothing},Exception,Any}","page":"Documentation","title":"SBML.get_error_messages","text":"get_error_messages(doc::VPtr, error::Exception, report_severities)\n\nShow the error messages reported by SBML in the doc document and throw the error if they are more than 1.\n\nreport_severities switches the reporting of certain error types defined by libsbml; you can choose from [\"Fatal\", \"Error\", \"Warning\", \"Informational\"].\n\n\n\n\n\n","category":"method"},{"location":"#SBML.initial_amounts-Tuple{SBML.Model}","page":"Documentation","title":"SBML.initial_amounts","text":"initial_amounts(\n    m::SBML.Model;\n    convert_concentrations = false,\n    compartment_size = comp -> get_compartment_size(m, comp),\n)\n\nReturn initial amounts for each species as a generator of pairs species_name => initial_amount; the amount is set to nothing if not available. If convert_concentrations is true and there is information about initial concentration available together with compartment size, the result is computed from the species' initial concentration.\n\nIn the current version, units of the measurements are completely ignored.\n\nExample\n\n# get the initial amounts as dictionary\nDict(SBML.initial_amounts(model, convert_concentrations = true))\n\n# suppose the compartment size is 10.0 if unspecified\ncollect(SBML.initial_amounts(\n    model,\n    convert_concentrations = true,\n    compartment_size = comp -> SBML.get_compartment_size(model, comp, 10.0),\n))\n\n# remove the empty entries\nDict(k => v for (k,v) in SBML.initial_amounts(model) if !isnothing(v))\n\n\n\n\n\n","category":"method"},{"location":"#SBML.initial_concentrations-Tuple{SBML.Model}","page":"Documentation","title":"SBML.initial_concentrations","text":"initial_concentrations(\n    m::SBML.Model;\n    convert_amounts = false,\n    compartment_size = comp -> get_compartment_size(m, comp),\n)\n\nReturn initial concentrations of the species in the model. Refer to work-alike initial_amounts for details.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.mayfirst-Tuple","page":"Documentation","title":"SBML.mayfirst","text":"mayfirst(args::Maybe{T}...)::Maybe{T} where T\n\nHelper to get the first non-nothing value from the arguments.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.maylift-Tuple{Any,Vararg{Union{Nothing, X} where X,N} where N}","page":"Documentation","title":"SBML.maylift","text":"maylift(f, args::Maybe...)\n\nHelper to lift a function to work on Maybe, returning nothing whenever there's a nothing in args.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.stoichiometry_matrix-Tuple{SBML.Model}","page":"Documentation","title":"SBML.stoichiometry_matrix","text":"function stoichiometry_matrix(m::SBML.Model)\n\nExtract the vector of species (aka metabolite) identifiers, vector of reaction identifiers, and a sparse stoichiometry matrix (of type SparseMatrixCSC from SparseArrays package) from an existing SBML.Model. Returns a 3-tuple with these values.\n\n\n\n\n\n","category":"method"},{"location":"#Math-and-Symbolics.jl-compatibility","page":"Documentation","title":"Math and Symbolics.jl compatibility","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"symbolics.jl\"]","category":"page"},{"location":"#SBML.default_symbolics_constants","page":"Documentation","title":"SBML.default_symbolics_constants","text":"const default_symbolics_constants::Dict{String, Any}\n\nA dictionary of default constants filled in place of SBML Math constants in the symbolics conversion.\n\n\n\n\n\n","category":"constant"},{"location":"#SBML.default_symbolics_mapping","page":"Documentation","title":"SBML.default_symbolics_mapping","text":"default_symbolics_mapping :: Dict{String,Any}\n\nDefault mapping of SBML function names to Julia functions, represented as a dictionary from Strings (SBML names) to anything evaluable as Julia&Symbolics functions, such as symbols and expressions.\n\nThe default mapping only contains the basic SBML functions that are unambiguously represented in Julia; it is supposed to be extended by the user if more functions need to be supported.\n\n\n\n\n\n","category":"constant"},{"location":"#Base.convert-Tuple{Type{Symbolics.Num},SBML.Math}","page":"Documentation","title":"Base.convert","text":"Base.convert(\n    ::Type{Num},\n    x::SBML.Math;\n    mapping = default_symbolics_mapping,\n    convert_time = function (x::SBML.MathTime)\n        sym = Symbol(x.id)\n        Symbolics.unwrap(first(@variables $sym))\n    end,\n    convert_const = (x::SBML.MathConst) -> Num(default_symbolics_constants[x.id]),\n)\n\nConvert SBML.Math to Num type from Symbolics package. The conversion of functions can be customized by supplying a custom mapping; if nothing is supplied, default_symbolics_mapping that translates basic functions to their Julia equivalents is assumed.\n\nTranslation of MathLambda is not supported by Symbolics.\n\nMathTime is handled specially, the function from the argument convert_time is called to possibly specify any desired behavior. By default, it just creates a variable with the same name as the time variable name stored in SBML.\n\n\n\n\n\n","category":"method"},{"location":"#Internal-math-helpers","page":"Documentation","title":"Internal math helpers","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [SBML]\nPages = [\"math.jl\"]","category":"page"},{"location":"#SBML.ast_is-Tuple{Ptr{Nothing},Symbol}","page":"Documentation","title":"SBML.ast_is","text":"ast_is(ast::VPtr, what::Symbol)::Bool\n\nHelper for quickly recognizing kinds of ASTs\n\n\n\n\n\n","category":"method"},{"location":"#SBML.parse_math-Tuple{Ptr{Nothing}}","page":"Documentation","title":"SBML.parse_math","text":"parse_math(ast::VPtr)::Math\n\nThis attempts to parse out a decent Julia-esque (Math AST from a pointer to ASTNode_t.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.parse_math_children-Tuple{Ptr{Nothing}}","page":"Documentation","title":"SBML.parse_math_children","text":"parse_math_children(ast::VPtr)::Vector{Math}\n\nRecursively parse all children of an AST node.\n\n\n\n\n\n","category":"method"}]
}
