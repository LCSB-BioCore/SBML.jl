var documenterSearchIndex = {"docs":
[{"location":"functions/#Data-types","page":"Reference","title":"Data types","text":"","category":"section"},{"location":"functions/#Helper-types","page":"Reference","title":"Helper types","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"types.jl\"]","category":"page"},{"location":"functions/#SBML.Maybe","page":"Reference","title":"SBML.Maybe","text":"Maybe{X}\n\nType shortcut for \"X or nothing\" or \"nullable X\" in javaspeak. Name got inspired by our functional friends.\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.VPtr","page":"Reference","title":"SBML.VPtr","text":"VPtr\n\nA convenience wrapper for \"any\" (C void) pointer.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Model-data-structures","page":"Reference","title":"Model data structures","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"structs.jl\"]","category":"page"},{"location":"functions/#SBML.AlgebraicRule","page":"Reference","title":"SBML.AlgebraicRule","text":"struct AlgebraicRule <: SBML.Rule\n\nSBML algebraic rule.\n\nFields\n\nmath::SBML.Math\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.AssignmentRule","page":"Reference","title":"SBML.AssignmentRule","text":"struct AssignmentRule <: SBML.Rule\n\nSBML assignment rule.\n\nFields\n\nid::String\nmath::SBML.Math\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.Constraint","page":"Reference","title":"SBML.Constraint","text":"struct Constraint\n\nSBML constraint.\n\nFields\n\nmath::SBML.Math\nmessage::String\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.GPAAnd","page":"Reference","title":"SBML.GPAAnd","text":"Boolean binary \"and\" in the association expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.GPAOr","page":"Reference","title":"SBML.GPAOr","text":"Boolean binary \"or\" in the association expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.GPARef","page":"Reference","title":"SBML.GPARef","text":"Gene product reference in the association expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.GeneProductAssociation","page":"Reference","title":"SBML.GeneProductAssociation","text":"Abstract type for all kinds of gene product associations\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.Math","page":"Reference","title":"SBML.Math","text":"A simplified representation of MathML-specified math AST\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.MathApply","page":"Reference","title":"SBML.MathApply","text":"Function application (\"call by name\", no tricks allowed) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.MathConst","page":"Reference","title":"SBML.MathConst","text":"A constant identified by name (usually something like pi, e or true) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.MathIdent","page":"Reference","title":"SBML.MathIdent","text":"An identifier (usually a variable name) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.MathLambda","page":"Reference","title":"SBML.MathLambda","text":"Function definition (aka \"lambda\") in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.MathTime","page":"Reference","title":"SBML.MathTime","text":"A special value representing the current time of the simulation, with a special name.\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.MathVal","page":"Reference","title":"SBML.MathVal","text":"A literal value (usually a numeric constant) in mathematical expression\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.RateRule","page":"Reference","title":"SBML.RateRule","text":"struct RateRule <: SBML.Rule\n\nSBML rate rule.\n\nFields\n\nid::String\nmath::SBML.Math\n\n\n\n\n\n","category":"type"},{"location":"functions/#SBML.Rule","page":"Reference","title":"SBML.Rule","text":"abstract type Rule\n\nAbstract type representing SBML rules.\n\n\n\n\n\n","category":"type"},{"location":"functions/#Base-functions","page":"Reference","title":"Base functions","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"SBML.jl\"]","category":"page"},{"location":"functions/#SBML.SBML","page":"Reference","title":"SBML.SBML","text":"SBML.jl\n\nBuild status Documentation Stats\n(Image: CI status) (Image: stable documentation) (Image: dev documentation) (Image: SBML Downloads)\n\nThis is a simple wrap of some of the libSBML functionality, mainly the model loading for purposes of COBRA analysis methods and exploration of ODE system and reaction dynamics.\n\nYou might like to try the packages that use SBML.jl; these now include:\n\nCOBREXA.jl, the exascale-ready constraint-based analysis and reconstruction toolkit for finding and modeling steady metabolic fluxes with the models\nSBMLToolkit.jl, for working with the reaction dynamics of the models as ODE systems, well connected to the SciML ModelingToolkit ecosystem.\n\nOther functionality will be added as needed. Feel free to submit a PR that increases the loading \"coverage\".\n\nAcknowledgements\n\nSBML.jl was developed at the Luxembourg Centre for Systems Biomedicine of the University of Luxembourg (uni.lu/lcsb), and the UCL Research Software Development Group (ucl.ac.uk/arc). The development was supported by European Union's Horizon 2020 Programme under PerMedCoE project (permedcoe.eu) agreement no.  951773, and Chan Zuckerberg Initiative (chanzuckerberg.com) under grant 2020-218578 (5022).\n\n<img src=\"docs/src/assets/unilu.svg\" alt=\"Uni.lu logo\" height=\"64px\">   <img src=\"docs/src/assets/lcsb.svg\" alt=\"LCSB logo\" height=\"64px\">   <img src=\"docs/src/assets/permedcoe.svg\" alt=\"PerMedCoE logo\" height=\"64px\">   <img src=\"docs/src/assets/ucl.svg\" alt=\"UCL logo\" height=\"64px\">\n\nInstallation\n\n]add SBML # or\nusing Pkg; Pkg.add(\"SBML\")\n\nUsage\n\nusing SBML\nm = readSBML(\"myModel.xml\")\n\n# m is now a Model structure with:\nm.reactions\nm.species\nm.compartments\n...\n\nThere are several helper functions, for example you can get a nice list of reactions, metabolites and the stoichiometric matrix as follows:\n\nmets, rxns, S = stoichiometry_matrix(m)\n\n\n\n\n\n","category":"module"},{"location":"functions/#Loading-and-versioning","page":"Reference","title":"Loading and versioning","text":"","category":"section"},{"location":"functions/#libsbml-representation-converters","page":"Reference","title":"libsbml representation converters","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"The converters are intended to be used as parameters of readSBML.","category":"page"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"converters.jl\"]","category":"page"},{"location":"functions/#SBML.convert_simplify_math","page":"Reference","title":"SBML.convert_simplify_math","text":"convert_simplify_math\n\nShortcut for libsbml_convert that expands functions, local parameters, and initial assignments in the SBML document.\n\n\n\n\n\n","category":"function"},{"location":"functions/#SBML.libsbml_convert","page":"Reference","title":"SBML.libsbml_convert","text":"libsbml_convert(conversion_options::Vector{Pair{String, Dict{String, String}}}, report_severities = [\"Fatal\", \"Error\"])\n\nA converter that runs the SBML conversion routine, with specified conversion options. The argument is a vector of pairs to allow specifying the order of conversions.  report_severities switches on and off reporting of certain errors; see the documentation of get_error_messages for details.\n\n\n\n\n\n","category":"function"},{"location":"functions/#SBML.libsbml_convert-2","page":"Reference","title":"SBML.libsbml_convert","text":"libsbml_convert(converter::String, report_severities = [\"Fatal\", \"Error\"]; kwargs...)\n\nQuickly construct a single run of a libsbml converter from keyword arguments. report_severities switches on and off reporting of certain errors; see the documentation of get_error_messages for details.\n\nExample\n\nreadSBML(\"example.xml\", libsbml_convert(\"stripPackage\", package=\"layout\"))\n\n\n\n\n\n","category":"function"},{"location":"functions/#SBML.set_level_and_version","page":"Reference","title":"SBML.set_level_and_version","text":"set_level_and_version(level, version, report_severities = [\"Fatal\", \"Error\"])\n\nA converter to pass into readSBML that enforces certain SBML level and version.  report_severities switches on and off reporting of certain errors; see the documentation of get_error_messages for details.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Helper-functions","page":"Reference","title":"Helper functions","text":"","category":"section"},{"location":"functions/#Data-accessors","page":"Reference","title":"Data accessors","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"utils.jl\"]","category":"page"},{"location":"functions/#SBML.check_errors","page":"Reference","title":"SBML.check_errors","text":"check_errors(\n    success::Integer,\n    doc::VPtr,\n    error::Exception,\n    report_severities = [\"Fatal\", \"Error\"],\n)\n\nIf success is a 0-valued Integer (a logical false), then call get_error_messages to show the error messages reported by SBML in the doc document and throw the error if they are more than 1.  success is typically the value returned by an SBML C function operating on doc which returns a boolean flag to signal a successful operation.\n\n\n\n\n\n","category":"function"},{"location":"functions/#SBML.extensive_kinetic_math-Tuple{SBML.Model,SBML.Math}","page":"Reference","title":"SBML.extensive_kinetic_math","text":"function extensive_kinetic_math(\n    m::SBML.Model,\n    formula::SBML.Math;\n    handle_empty_compartment_size = (id::String) -> throw(\n        DomainError(\n            \"Non-substance-only-unit reference to species `$id' in an unsized compartment `$(m.species[id].compartment)'\",\n        ),\n    ),\n)\n\nConvert a SBML math formula to \"extensive\" kinetic laws, where the references to species that are marked as not having only substance units are converted from amounts to concentrations.\n\nIf the data is missing, you can supply a function that adds them. A common way to handle errors is to assume that unsized compartments have volume 1.0 (of whatever units), you can specify that behavior by supplying handle_empty_compartment_size = _ -> 1.0.\n\nHandling of units in the conversion process is ignored in this version.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.flux_bounds-Tuple{SBML.Model}","page":"Reference","title":"SBML.flux_bounds","text":"flux_bounds(m::SBML.Model)::NTuple{2, Vector{Tuple{Float64,String}}}\n\nExtract the vectors of lower and upper bounds of reaction rates from the model, in the same order as keys(m.reactions).  All bounds are accompanied with the unit of the corresponding value (the behavior is based on SBML specification). Missing bounds are represented by negative/positive infinite values with empty-string unit.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.flux_objective-Tuple{SBML.Model}","page":"Reference","title":"SBML.flux_objective","text":"flux_objective(m::SBML.Model)::Vector{Float64}\n\nExtract the vector of objective coefficients of each reaction, in the same order as keys(m.reactions).\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.get_compartment_size-Tuple{SBML.Model,Any}","page":"Reference","title":"SBML.get_compartment_size","text":"get_compartment_size(m::SBML.Model, compartment; default = nothing)\n\nA helper for easily getting out a defaulted compartment size.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.get_error_messages-Tuple{Ptr{Nothing},Exception,Any}","page":"Reference","title":"SBML.get_error_messages","text":"get_error_messages(doc::VPtr, error::Exception, report_severities)\n\nShow the error messages reported by SBML in the doc document and throw the error if they are more than 1.\n\nreport_severities switches the reporting of certain error types defined by libsbml; you can choose from [\"Fatal\", \"Error\", \"Warning\", \"Informational\"].\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.initial_amounts-Tuple{SBML.Model}","page":"Reference","title":"SBML.initial_amounts","text":"initial_amounts(\n    m::SBML.Model;\n    convert_concentrations = false,\n    compartment_size = comp -> get_compartment_size(m, comp),\n)\n\nReturn initial amounts for each species as a generator of pairs species_name => initial_amount; the amount is set to nothing if not available. If convert_concentrations is true and there is information about initial concentration available together with compartment size, the result is computed from the species' initial concentration.\n\nThe units of measurement are ignored in this computation, but one may reconstruct them from substance_units field of Species structure.\n\nExample\n\n# get the initial amounts as dictionary\nDict(SBML.initial_amounts(model, convert_concentrations = true))\n\n# suppose the compartment size is 10.0 if unspecified\ncollect(SBML.initial_amounts(\n    model,\n    convert_concentrations = true,\n    compartment_size = comp -> SBML.get_compartment_size(model, comp, 10.0),\n))\n\n# remove the empty entries\nDict(k => v for (k,v) in SBML.initial_amounts(model) if !isnothing(v))\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.initial_concentrations-Tuple{SBML.Model}","page":"Reference","title":"SBML.initial_concentrations","text":"initial_concentrations(\n    m::SBML.Model;\n    convert_amounts = false,\n    compartment_size = comp -> get_compartment_size(m, comp),\n)\n\nReturn initial concentrations of the species in the model. Refer to work-alike initial_amounts for details.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.mayfirst-Tuple","page":"Reference","title":"SBML.mayfirst","text":"mayfirst(args::Maybe{T}...)::Maybe{T} where T\n\nHelper to get the first non-nothing value from the arguments.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.maylift-Tuple{Any,Vararg{Union{Nothing, X} where X,N} where N}","page":"Reference","title":"SBML.maylift","text":"maylift(f, args::Maybe...)\n\nHelper to lift a function to work on Maybe, returning nothing whenever there's a nothing in args.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.stoichiometry_matrix-Tuple{SBML.Model}","page":"Reference","title":"SBML.stoichiometry_matrix","text":"function stoichiometry_matrix(m::SBML.Model)\n\nExtract the vector of species (aka metabolite) identifiers, vector of reaction identifiers, and a sparse stoichiometry matrix (of type SparseMatrixCSC from SparseArrays package) from an existing SBML.Model. Returns a 3-tuple with these values.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Units-support","page":"Reference","title":"Units support","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"unitful.jl\"]","category":"page"},{"location":"functions/#SBML.unitful-Tuple{Array{SBML.UnitPart,1}}","page":"Reference","title":"SBML.unitful","text":"unitful(units::Vector{UnitPart})\n\nConverts an SBML unit (i.e., a vector of UnitParts) to a corresponding Unitful unit.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.unitful-Tuple{SBML.Model,Tuple{Float64,String},Number}","page":"Reference","title":"SBML.unitful","text":"unitful(m::Model, val::Tuple{Float64, String}, default_unit::Number)\n\nOverload of unitful that uses the default_unit if the unit is not found in the model.\n\nExample\n\njulia> SBML.unitful(mdl, (10.0,\"firkin\"), 90 * u\"lb\")\n990.0 lb\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.unitful-Tuple{SBML.Model,Tuple{Float64,String},String}","page":"Reference","title":"SBML.unitful","text":"unitful(m::Model, val::Tuple{Float64, String}, default_unit::String)\n\nOverload of unitful that allows specification of the default_unit by string ID.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.unitful-Tuple{SBML.Model,Tuple{Float64,String}}","page":"Reference","title":"SBML.unitful","text":"unitful(m::Model, val::Tuple{Float64,String})\n\nComputes a properly unitful value from a value-unit pair stored in the model m.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.unitful-Tuple{SBML.UnitDefinition}","page":"Reference","title":"SBML.unitful","text":"unitful(units::UnitDefinition)\n\nConverts an SBML unit definition (i.e., its vector of UnitParts) to a corresponding Unitful unit.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.unitful-Tuple{SBML.UnitPart}","page":"Reference","title":"SBML.unitful","text":"unitful(u::UnitPart)\n\nConverts a UnitPart to a corresponding Unitful unit.\n\nThe conversion is done according to the formula from SBML L3v2 core manual release 2(section 4.4.2).\n\n\n\n\n\n","category":"method"},{"location":"functions/#MathML-representation-and-Symbolics.jl-compatibility","page":"Reference","title":"MathML representation and Symbolics.jl compatibility","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"symbolics.jl\"]","category":"page"},{"location":"functions/#SBML.default_symbolics_constants","page":"Reference","title":"SBML.default_symbolics_constants","text":"const default_symbolics_constants::Dict{String, Any}\n\nA dictionary of default constants filled in place of SBML Math constants in the symbolics conversion.\n\n\n\n\n\n","category":"constant"},{"location":"functions/#SBML.default_symbolics_mapping","page":"Reference","title":"SBML.default_symbolics_mapping","text":"default_symbolics_mapping :: Dict{String,Any}\n\nDefault mapping of SBML function names to Julia functions, represented as a dictionary from Strings (SBML names) to functions.\n\nThe default mapping only contains the basic SBML functions that are unambiguously represented in Julia; it is supposed to be extended by the user if more functions need to be supported.\n\n\n\n\n\n","category":"constant"},{"location":"functions/#Base.convert-Tuple{Type{Symbolics.Num},SBML.Math}","page":"Reference","title":"Base.convert","text":"Base.convert(\n    ::Type{Num},\n    x::SBML.Math;\n    mapping = default_symbolics_mapping,\n    convert_time = function (x::SBML.MathTime)\n        sym = Symbol(x.id)\n        Symbolics.unwrap(first(@variables $sym))\n    end,\n    convert_const = (x::SBML.MathConst) -> Num(default_symbolics_constants[x.id]),\n)\n\nConvert SBML.Math to Num type from Symbolics package. The conversion of functions can be customized by supplying a custom mapping; if nothing is supplied, default_symbolics_mapping that translates basic functions to their Julia equivalents is assumed.\n\nTranslation of MathLambda is not supported by Symbolics.\n\nMathTime is handled specially, the function from the argument convert_time is called to possibly specify any desired behavior. By default, it just creates a variable with the same name as the time variable name stored in SBML.\n\n\n\n\n\n","category":"method"},{"location":"functions/#Internal-math-helpers","page":"Reference","title":"Internal math helpers","text":"","category":"section"},{"location":"functions/","page":"Reference","title":"Reference","text":"Modules = [SBML]\nPages = [\"math.jl\"]","category":"page"},{"location":"functions/#SBML.ast_is-Tuple{Ptr{Nothing},Symbol}","page":"Reference","title":"SBML.ast_is","text":"ast_is(ast::VPtr, what::Symbol)::Bool\n\nHelper for quickly recognizing kinds of ASTs\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.parse_math-Tuple{Ptr{Nothing}}","page":"Reference","title":"SBML.parse_math","text":"parse_math(ast::VPtr)::Math\n\nThis attempts to parse out a decent Julia-esque (Math AST from a pointer to ASTNode_t.\n\n\n\n\n\n","category":"method"},{"location":"functions/#SBML.parse_math_children-Tuple{Ptr{Nothing}}","page":"Reference","title":"SBML.parse_math_children","text":"parse_math_children(ast::VPtr)::Vector{Math}\n\nRecursively parse all children of an AST node.\n\n\n\n\n\n","category":"method"},{"location":"#SBML.jl-—-load-systems-biology-models-from-SBML-files","page":"Home","title":"SBML.jl — load systems biology models from SBML files","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a straightforward way to load model- and simulation-relevant information from SBML files.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The representation does not follow the XML structure within SBML, but instead translates the contents into native Julia structs. This makes the models much easier to work with from Julia,","category":"page"},{"location":"#Quick-start","page":"Home","title":"Quick-start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The \"main\" function of the library is readSBML, which does exactly what it says: loads a SBML model from disk into the SBML.Model:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using SBML\njulia> mdl = readSBML(\"Ec_core_flux1.xml\")\nSBML.Model(…)\n\njulia> mdl.compartments\n2-element Array{String,1}:\n \"Extra_organism\"\n \"Cytosol\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"There are several functions that help you with using the data in the usual COBRA-style workflows, such as stoichiometry_matrix. Others are detailed in the relevant sections of the function reference.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> metabolites, reactions, S = stoichiometry_matrix(mdl)\njulia> metabolites\n77-element Array{String,1}:\n \"M_succoa_c\"\n \"M_ac_c\"\n \"M_etoh_c\"\n  ⋮\n\njulia> S\n77×77 SparseArrays.SparseMatrixCSC{Float64,Int64} with 308 stored entries:\n  [60,  1]  =  -1.0\n  [68,  1]  =  1.0\n  [1 ,  2]  =  1.0\n  [6 ,  2]  =  -1.0\n  ⋮\n  [23, 76]  =  1.0\n  [56, 76]  =  -1.0\n  [30, 77]  =  -1.0\n  [48, 77]  =  1.0\n\njulia> Matrix(S)\n77×77 Array{Float64,2}:\n 0.0   1.0  0.0  0.0  0.0  0.0  0.0  …  0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  1.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0  -1.0  0.0  0.0  0.0  0.0  0.0  …  0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  1.0  -1.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0   0.0  0.0   0.0  0.0  0.0  0.0\n 0.0   0.0  0.0  0.0  0.0  0.0  0.0     0.0  -1.0  0.0   0.0  0.0  0.0  0.0\n ⋮                         ⋮         ⋱  ⋮                          ⋮    ","category":"page"},{"location":"#Table-of-contents","page":"Home","title":"Table of contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"functions.md\"]\nDepth = 2","category":"page"}]
}
